---
description: 
globs: 
alwaysApply: false
---
# Project Rules (Generated from rules)

## Rule Source: 000_general.md

# Mastra Project General Rules

## 1. Project Overview
- This is a large monorepo for the Mastra project, managed with pnpm.
- The primary language is TypeScript.
- It contains core packages (`packages/`), integrations (`integrations/`), data stores (`stores/`), voice/speech capabilities (`speech/`, `voice/`), deployment helpers (`deployers/`), examples (`examples/`), and documentation (`docs/`).

## 2. Code Structure Awareness
- When working on a task, identify the relevant package(s) within the monorepo structure (e.g., `packages/core`, `integrations/github`).
- Understand that code might be spread across multiple packages. Check imports and dependencies.
- Look for tests within the relevant package (`src/` or `tests/` directories, usually ending in `.test.ts` or `.spec.ts`).
- This section (or a dedicated rule file) MUST contain an up-to-date representation of the high-level project folder structure. You may be asked to update this structure periodically based on the current state of the codebase.

## 3. Language and Formatting
- Write clean, idiomatic TypeScript code.
- Strictly follow the existing coding style, formatting, and linting rules defined by ESLint configurations (`eslint.config.js` or similar) found within the packages or the root. Adhere to existing code patterns.
- Keep functions and components focused on a single responsibility.

## 4. Package Management (pnpm)
- Use `pnpm` for all package management tasks.
- To add a dependency to a specific package: `pnpm add <dependency> --filter @mastra/<package-name>`
- To add a dev dependency to the workspace root (e.g., for scripts): `pnpm add -D -w <dependency>`
- Always check `package.json` for existing scripts before adding new ones.

## 5. Testing (Vitest)
- This project uses Vitest for testing.
- When adding new features or fixing bugs, include corresponding tests.
- Ensure existing tests pass after making changes. Run tests using `pnpm test` within the relevant package or from the root.

## 6. Commits and Documentation
- Follow Conventional Commits format for commit messages (e.g., `feat:`, `fix:`, `docs:`, `test:`, `refactor:`).
- Update relevant `README.md` files or documentation in the `docs/` directory if your changes affect usage or public APIs.
- Add TSDoc comments to exported functions, classes, and types to explain their purpose, parameters, and return values.

## 7. General Guidelines
- Do not introduce breaking changes to public APIs without careful consideration and documentation.
- Avoid adding large files or binaries to the repository.
- Unless specifically instructed, do not modify core configuration files (`tsconfig.json`, `eslint.config.js`, `vitest.config.ts`, `package.json` scripts, `pnpm-workspace.yaml`, `turbo.json`) or lockfiles (`pnpm-lock.yaml`).
- Prefer imports using workspace aliases (e.g., `@mastra/core`) over relative paths when crossing package boundaries.
**- For specific questions about Mastra features, APIs, examples, or recent changes, utilize the available MCP tools (`mcp_mastra_mastraDocs`, `mcp_mastra_mastraExamples`, `mcp_mastra_mastraBlog`, `mcp_mastra_mastraChanges`). Consult the documentation first.**

---

**IMPORTANT REMINDER:** After modifying any `.md` file within the `rules/` directory, **ALWAYS** run `node scripts/generate-rules.mjs` to update the combined `.cursor/rules/project_rules.mdc` file. Failure to do so will result in the AI not using the latest rules.


---

## Rule Source: 001_coding_standards.md



---

## Rule Source: 002_package_management.md



---

## Rule Source: 003_documentation.md



---

## Rule Source: 004_testing_guidelines.md



---

## Rule Source: 005_mastra_basics.md

# Mastra Basics (from Documentation)

## 1. Installation & Setup
- **Prerequisites:** Node.js v20+, LLM API Key (OpenAI, Anthropic, Google Gemini, etc.) or local setup (Ollama).
- **Recommended Method:** Use `npx create-mastra@latest`. This interactive CLI scaffolds the project, letting you choose components (Agents, Tools, Workflows), a default LLM provider, include example code, and optionally set up MCP server integration (for Cursor/Windsurf).
- **Manual Setup:** Possible via `npm/pnpm/yarn/bun`, requires installing `@mastra/core`, `typescript`, `zod`, etc., setting up `tsconfig.json`, `.env` for API keys, and manually creating initial agents/tools.
- **API Keys:** Store LLM provider API keys in the `.env` file (e.g., `OPENAI_API_KEY=...`).

## 2. Recommended Project Structure (`src/mastra`)
- `create-mastra` suggests organizing Mastra code within `src/mastra`.
- **`src/mastra/index.ts`:** The main entry point where the `Mastra` class is instantiated and components are registered.
- **`src/mastra/agents/`:** Contains Agent definitions (e.g., `weatherAgent.ts`). Often includes an `index.ts` to export agents.
- **`src/mastra/tools/`:** Contains Tool definitions (e.g., `weather-tool.ts`). Often includes an `index.ts` to export tools.
- **`src/mastra/workflows/`:** Contains Workflow definitions. Often includes an `index.ts` to export workflows.

## 3. Core Concepts (`@mastra/core`)
- **`Mastra` Class:** The central registry instantiated in `src/mastra/index.ts`. It manages:
    - `agents`: Registered Agent instances.
    - `tools`: Registered Tool instances.
    - `workflows`: Registered Workflow instances.
    - `storage`: Optional persistence layer.
    - `vectors`: Optional vector store instances (for RAG).
    - `logger`: Optional custom logger.
    - `serverMiddleware`: Optional middleware for API routes.
- **Agents:** Core reasoning units, often using LLMs and Tools to fulfill requests. Defined with instructions, a model, and associated tools.
- **Tools:** Functions that Agents can call to interact with external systems or perform specific tasks (e.g., fetching weather, searching a database). Defined with `createTool`, including `id`, `description`, `inputSchema` (Zod), `outputSchema` (Zod), and an `execute` function.
- **Workflows:** Define sequences or graphs of steps involving Agents, Tools, or other logic.

## 4. Running & Interacting
- **Development Server:** `mastra dev` (or `npm run dev`/`pnpm dev` etc.) starts a server (default: `http://localhost:4111`) exposing registered agents as REST API endpoints (e.g., `/api/agents/weatherAgent/generate`).
- **Direct Execution:** Agents can be run directly from scripts using `mastra.getAgent()` and calling methods like `agent.generate()`. Run scripts with `npx tsx src/index.ts`.
- **Client Interaction:** Use `@mastra/client-js` SDK in frontend applications to interact with the Mastra REST API in a type-safe manner.

## 5. Key Packages
- **`@mastra/core`:** The main package containing the `Mastra` class, `Agent` class, `createTool`, `createWorkflow`, etc.
- **`@ai-sdk/...`:** Used for interacting with different LLM providers (e.g., `@ai-sdk/openai`).
- **`zod`:** Used for defining input/output schemas for Tools and potentially other validation tasks.
- **`@mastra/client-js`:** Frontend SDK.
- **`create-mastra`:** Scaffolding CLI tool. 

---